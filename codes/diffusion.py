#!/usr/bin/env python

"""
Diffusion Model

version = 1.0

*Reference*
Jonathan Ho, Ajay Jain, Pieter Abbeel. Denoising Diffusion Probabilistic Models.
"""

import numpy as np
import random
from scipy.stats import rv_discrete, multivariate_normal, bernoulli
from scipy.special import expit, softmax
from sklearn.base import TransformerMixin
from sklearn.neural_network import MLPRegressor

from utils import *


T = 1000

# Parameters and Notations
beta = 1/(T - np.arange(1, T+1) + 1) * 0.01 + 0.0001
alpha = 1 - beta
bar_alpha = np.cumprod(alpha)
rate = np.sqrt(bar_alpha)
rev_rate =  np.sqrt(1-bar_alpha)
sigma_square = (1- bar_alpha[:-1])/(1-bar_alpha[1:]) * beta[1:]
sigma = np.sqrt(sigma_square)


def xt(x0, epsilon=0, t=1):
    return rate[t] * x0 + rev_rate[t] * epsilon


def _fit(X, nns, max_iter=1500):
    n_samples, n_features = X.shape
    # n_batches = 10
    # batch_size = n_samples // n_batches

    for _ in range(max_iter):
        for x in X:
            t = np.random.randint(T)
            es = np.random.randn(10, n_features)
            xs = np.array([xt(x, e, t) for e in es])
            nns.partial_fit(np.insert(xs, 0, t/T, axis=1), es)
    return nns


def _gen(xt, t, nns):
    # x{t-1} ~ P(x{t-1} | xt)
    x = 1/np.sqrt(alpha[t])*(xt-beta[t] / rev_rate[t] * nns.predict(np.insert(xt,0, t/T, axis=1)))
    if t == 0:
        return x
    else:
        return x + sigma[t-1] * np.random.randn(*x.shape)


def gen(n_samples, n_features, nns):
    z = np.random.randn(n_samples, n_features)
    for t in range(T-1, 0,-1):
        z = _gen(z, t, nns)
    return _gen(z, 0, nns)


if __name__ == '__main__':

    nns = MLPRegressor(hidden_layer_sizes=(12, 5), warm_start=True)

    from sklearn.datasets import load_digits
    digists = load_digits()
    X_train, y_train = digists.data, digists.target
    X = X_train[(y_train==0)]

    X = scaling_logit(X, lb=0, ub=16)

    n_samples, n_features = X.shape
    nns = _fit(X, nns)

    x = gen(2, n_features, nns)

    x = scaling_expit(x, lb=0, ub=16)

    import matplotlib.pyplot as plt
    fig = plt.figure()
    ax = fig.subplots(1, 3)
    size = 8, 8  # size of image
    ax[0].imshow(X[2].reshape(size))
    ax[0].set_title('A real image')
    ax[1].imshow(x[0].reshape(size))
    ax[1].set_title('generated by model')
    ax[2].imshow(x[1].reshape(size))
    ax[2].set_title('generated by model')
    for _ in ax: _.set_axis_off()
    fig.suptitle("Image Generator (Demo of Diffusion Model)")
    plt.show()

