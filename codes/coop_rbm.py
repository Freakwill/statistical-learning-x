#!/usr/bin/env python

"""
Cooperation Learning for RBM

*Reference*
Jianwen Xie, Yang Lu, Ruiqi Gao, Ying Nian Wu. Cooperative Learning of Energy-Based Model and Latent Variable Model via MCMC Teaching 
"""


import random

import numpy as np
from scipy.linalg import lstsq

from scipy.stats import rv_discrete, multivariate_normal, bernoulli
from scipy.special import expit, softmax
from sklearn.base import TransformerMixin

from cd_rbm import CDRBM

from sklearn.datasets import load_digits

digists = load_digits()
X_train, y_train = digists.data, digists.target
X = X_train[(y_train<5)]
n_samples, n_features = X.shape
n_components = 2

Z = np.random.normal(size=(n_samples, n_components)) # ~ q(Z|X) by MCMC

def generate(V):
    Z = np.random.normal(size=(n_samples, n_components))
    return Z @ V.T

def gen_fit(X, Z):
    V, _, _, _ = lstsq(X, Z)
    return V

def _fit(rbm, X):
    rbm.init(X)
    V = np.random.normal(size=(n_features, n_components))
    start = generate(V)
    rbm._fit(X, max_iter=rbm.max_iter, mc_iter=rbm.mc_iter, persistent=rbm.persistent, start=start)

    for _ in range(5):
        X = rbm.fantasy
        V = gen_fit(X, Z)
        start = generate(V)
        rbm._fit(X, max_iter=rbm.max_iter, mc_iter=rbm.mc_iter, persistent=rbm.persistent, start=start)
    return rbm


if __name__ == '__main__':
    
    rbm = CDRBM(max_iter=10, mc_iter=4, persistent=True)
    rbm.n_values = 17 # currently, you have to set the attr. manually.
    rbm = _fit(rbm, X)
    # choose a sample
    x = X[4]
    xc = x.copy()
    mask = np.arange(64)<=32
    xc[mask] = 0
    xr = rbm.generate(mc_iter=50, start=xc)
    x_ = rbm.impute(mc_iter=50, start=xc, mask=mask)

    import matplotlib.pyplot as plt
    fig = plt.figure()
    ax = fig.subplots(2, 2)
    size = 8, 8  # size of image
    ax[0,0].imshow(x.reshape(size))
    ax[0,0].set_title('A real image')
    ax[0,1].imshow(xr.reshape(size))
    ax[0,1].set_title('Generated by the model')
    ax[1,0].imshow(xc.reshape(size))
    ax[1,0].set_title('A masked image')
    ax[1,1].imshow(x_.reshape(size))
    ax[1,1].set_title('Imputed by the model')
    for _ in ax.flat: _.set_axis_off()
    fig.suptitle("Demo of CD-RBM")
    plt.show()


    