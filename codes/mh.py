#!/usr/bin/env python

"""
Metropolis Hastings
"""

import numpy as np  
from scipy.stats import norm  
 

def mh(target_pdf, proposal, init_state=0, n_iterations=1000, burn_in=100):
    """Metropolis Hastings Algorithm
    
    Args:
        target_pdf (function): target pdf
        proposal (scipy object): proposal distribution
        init_state: initialization state
        n_iterations (int, optional): number of iterations
        burn_in (int, optional): size of burn-in sample
    
    Returns:
        array: the sample generated by the algorithm
    """

    # Initialization
    current_state = init_state
    samples = [init_state]  

    # Metropolis-Hastings Algo.
    for _ in range(n_iterations): 
        candidate_state = proposal(current_state).rvs()
        accept_prob = min(1, target_pdf(candidate_state) / target_pdf(current_state))
        if np.random.rand() < accept_prob:
            current_state = candidate_state
        samples.append(current_state) 
    return samples[burn_in:]  
  
if __name__ == '__main__':

    proposal = lambda x: norm(x, 0.3)
    target_pdf = norm(0, 1).pdf
    samples = mh(target_pdf, proposal)
    import matplotlib.pyplot as plt
    plt.hist(samples, bins=15, density=True, alpha=0.6, color='g')

    x_values = np.linspace(-3, 3, 200)
    plt.plot(x_values, target_pdf(x_values), 'r', alpha=0.5, label='Target Distribution')

    plt.xlabel('x')
    plt.ylabel('Probability Density')
    plt.title('Demo of Metropolis-Hastings Algo')
    plt.legend()
    plt.savefig('../lectures/mh.png')
    plt.show()
